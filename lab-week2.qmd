---
title: "eds223 lab 2"
format: html
editor: visual
---

```{r}
rm(list = ls)

library(tidyverse)
library(sf)
library(spData)
library(tmap)
```

```{r}
london_point <- st_point(c(0.1, 51.5)) # st stands for spacio temporal

london_geom <- st_sfc(london_point, crs = 4326)

london_attribute <- data.frame(
  name = "London",
  temperature = 25,
  date = as.Date("2017-06-21")
)

london_sf <- st_sf(london_attribute, geometry = london_geom)

class(london_sf)

st_crs(london_sf)$IsGeographic
```
```{r}
world <- spData::world

class(world)

names(world)

summary(world$lifeExp)
```

```{r}
world_df <- world |> 
  select(-geom)

world_df <- world |> 
  select(continent)

```

```{r}
world_df <- st_drop_geometry(world)                        # remove geom off of sticky sf object

class(world_df)
```
## Reprojecting data

```{r}
london_proj <- data.frame(x = 53000,
                          y = 180000) |> 
  st_as_sf(coords = c("x", "y"), crs = "EPSG:27700")

st_crs(london_proj) == st_crs(london_sf)        # Conditional check for CRS matches, very important use in homework 

london_sf_transformed <- st_transform(london_sf, crs = st_crs(london_proj))
```

```{r}
if(st_crs(london_sf_transformed) == st_crs(london_proj)) {
  print("it's a mtach! Coordinate reference systems of datsets match. ")
} else{
  warning("Coordinate reference systems do not match.") # or make it an error 
}
```

```{r}
tm_shape(world, projection = 8857) +
  tm_fill(col = "area_km2",
          palette = "Blues") +
  tm_graticules(alpha = 0.2)
```
```{r}
tm_shape(world, projection = 3395) +
  tm_fill(col = "area_km2") 
```
```{r}
 world |> 
  select(name_long, pop) 

world |> select(-subregion)

world |> select(name = name_long, population = pop)
```


```{r}
world1 <- world |> 
  filter(area_km2 < 10000)
```

```{r}
world |> 
  filter(continent == "Asia") |> 
  select(name_long, continent, lifeExp) |> 
  slice_max(lifeExp) |>                                                #picks row with highest value in life expectency 
  st_drop_geometry()
```
```{r}
world |> 
  group_by(continent) |> 
  summarise(population = sum(pop, na.rm = TRUE)) |> 
  st_drop_geometry()
```
# Joins with vector attributes
```{r}
coffee_data <- spData::coffee_data

nrow(coffee_data)
nrow(world)
```
```{r}
world_coffee <- left_join(world, coffee_data, by = "name_long")
```

```{r}
tm_shape(world_coffee) +
  tm_fill(col = "coffee_production_2017") 
```

```{r}
world_coffee_inner <- inner_join(world, coffee_data, by = "name_long") 

if(nrow(world_coffee_inner) < nrow(world)) {
  warning("Inner join does not match original data. Potential data loss during join.")
}
```
```{r}
setdiff(coffee_data$name_long, world$name_long)              
```

```{r}
drc <- stringr::str_subset(world$name_long, "Dem*.+Congo") 

coffee_data$name_long[stringr::str_detect(coffee_data$name_long, "Congo")] <- drc 
```

```{r}
tm_shape(world_coffee_inner) +
  tm_polygons(fill = "coffee_production_2017",
              title = "Coffee production (2017)") +
  tm_layout(legend.outside = TRUE)
```

